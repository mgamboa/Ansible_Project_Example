---
- name: Make sure requirements are met to run vmware modules PyVmoi and PyVim
  ansible.builtin.pip:
    name:
      - PyVmomi
      - PyVim
    state: present
  delegate_to: localhost

- name: Generate random hostname
  ansible.builtin.set_fact:
    random_hostname: "host{{ lookup('community.general.random_string', length=6, chars=['ascii_lowercase', 'digits']) }}"
    domain: "itmco.local"

- name: Set FQDN
  ansible.builtin.set_fact:
    fqdn: "{{ random_hostname }}.{{ domain }}"

- name: Create a virtual machine with customization and DHCP
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter_name }}"
    cluster: "{{ cluster_name }}"
    name: "{{ vm_name }}"
    template: "{{ 'RH8' if version == '8' else 'RH9' }}"
    folder: "{{ vm_folder }}"
    state: "poweredon"
    customization:
      domain: "{{ domain }}"
      hostname: "{{ random_hostname }}"
    networks:
      - name: "{{ vm_network_name }}"
        device_type: vmxnet3
        connected: true
        start_connected: true
    wait_for_ip_address: true
  delegate_to: localhost
  register: vm_creation_result

- name: Get VM MoID
  community.vmware.vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    vm_name: "{{ vm_name }}"
  register: vm_info_result
  delegate_to: localhost

- name: Set VM MoID fact
  set_fact:
    vm_moid: "{{ vm_info_result.virtual_machines[0].moid }}"
  delegate_to: localhost

- name: Wait for VM to get an IP address
  community.vmware.vmware_guest_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "{{ datacenter_name }}"
    validate_certs: no
    name: "{{ vm_name }}"
  delegate_to: localhost
  register: vm_info
  until: vm_info.instance.ipv4 is defined and vm_info.instance.ipv4 != None and vm_info.instance.ipv4 != ""
  retries: 10
  delay: 6

- name: Set VM IP address fact
  set_fact:
    vm_ip: "{{ vm_info.instance.ipv4 }}"

- name: Wait for SSH to become available
  wait_for:
    host: "{{ vm_ip }}"
    port: 22
    delay: 10
    timeout: 300
  delegate_to: localhost

- name: Add new VM to in-memory inventory
  add_host:
    name: "{{ vm_ip }}"
    groups: new_vms
    ansible_user: root
    ansible_password: "{{ initial_root_password }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

- name: Check initial kernel version
  command: uname -r
  register: initial_kernel_version
  changed_when: false
  delegate_to: "{{ vm_ip }}"
  when: patch_os | default(false) | bool

- name: Check for available updates on remote VM
  dnf:
    list: updates
  register: dnf_check
  delegate_to: "{{ vm_ip }}"
  when: patch_os | default(false) | bool

- name: Debug available updates
  debug:
    var: dnf_check
  when: patch_os | default(false) | bool

- name: Perform system update on remote VM
  dnf:
    name: "*"
    state: latest
    update_cache: yes
    become: yes
  when: 
    - patch_os | default(false) | bool
    - dnf_check.results | default([]) | length > 0
  register: patching_result
  delegate_to: "{{ vm_ip }}"

- name: Debug update result
  debug:
    var: patching_result
  when: patch_os | default(false) | bool

- name: Check updated kernel version
  command: rpm -q --last kernel | head -n 1
  register: updated_kernel_version
  changed_when: false
  delegate_to: "{{ vm_ip }}"
  when: patch_os | default(false) | bool

- name: Debug kernel versions
  debug:
    msg: 
      - "Initial kernel version: {{ initial_kernel_version.stdout }}"
      - "Updated kernel version: {{ updated_kernel_version.stdout }}"
  when: patch_os | default(false) | bool

- name: Set fact for kernel update status
  set_fact:
    kernel_updated: "{{ initial_kernel_version.stdout != updated_kernel_version.stdout.split()[0] }}"
  when: patch_os | default(false) | bool

- name: Change root password
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: 'root'
    vm_password: "{{ initial_root_password }}"
    vm_shell: /bin/bash
    vm_shell_args: "-c 'echo root:{{ new_root_password }} | chpasswd'"
  delegate_to: localhost
  when: vm_creation_result is changed

- name: Reboot VM if kernel was updated
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: "{{ vm_name }}"
    state: reboot-guest
  delegate_to: localhost
  when: 
    - patch_os | default(false) | bool
    - patching_result.changed
    - kernel_updated | bool

- name: Wait for VM power state (powered on)
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: "{{ vm_name }}"
    state: powered-on
  delegate_to: localhost
  register: vm_power_state
  until: vm_power_state.instance.hw_power_status == 'poweredOn'
  retries: 30
  delay: 10
  when: 
    - patch_os | default(false) | bool
    - patching_result.changed
    - kernel_updated | bool

- name: Wait for VMware tools to become available
  community.vmware.vmware_guest_tools_wait:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: "{{ vm_name }}"
  delegate_to: localhost
  when: 
    - patch_os | default(false) | bool
    - patching_result.changed
    - kernel_updated | bool

- name: Wait for VM to get an IP address after reboot
  community.vmware.vmware_guest_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "{{ datacenter_name }}"
    validate_certs: no
    name: "{{ vm_name }}"
  delegate_to: localhost
  register: vm_info_after_reboot
  until: vm_info_after_reboot.instance.ipv4 is defined and vm_info_after_reboot.instance.ipv4 != None and vm_info_after_reboot.instance.ipv4 != ""
  retries: 10
  delay: 6
  when:
    - patch_os | default(false) | bool
    - patching_result.changed
    - kernel_updated | bool

- name: Display VM IP address
  debug:
    msg: "The IP address of {{ vm_name }} is {{ vm_info_after_reboot.instance.ipv4 }}"
  when: 
    - vm_info_after_reboot.instance.ipv4 is defined and vm_info_after_reboot.instance.ipv4 != None and vm_info_after_reboot.instance.ipv4 != ""

- name: Update VMware vCenter inventory source
  awx.awx.inventory_source_update:
    name: "{{ awx_inventory_source_name | default('VMware vCenter') }}"
    inventory: "{{ vmware_inventory_id }}"
    organization: "{{ awx_organization_name | default('Default') }}"
    tower_host: "{{ awx_tower_url }}"
    tower_username: "{{ awx_username }}"
    tower_password: "{{ awx_password }}"
    validate_certs: false
  delegate_to: localhost
  register: inventory_update_result
  when: vmware_inventory_id is defined
  ignore_errors: true

- name: Display initial inventory update result
  debug:
    var: inventory_update_result

- name: Wait for inventory update to complete
  uri:
    url: "https://{{ awx_tower_url }}/api/v2/jobs/{{ inventory_update_result.id }}/"
    method: GET
    user: "{{ awx_username }}"
    password: "{{ awx_password }}"
    force_basic_auth: yes
    validate_certs: no
    return_content: yes
  register: job_result
  until: job_result is success and job_result.json is defined and job_result.json.status not in ['pending', 'waiting', 'running']
  retries: 60
  delay: 10
  ignore_errors: yes

- name: Display job result details
  debug:
    var: job_result

- name: Check inventory update result
  fail:
    msg: >
      Inventory update failed or timed out. 
      Status: {{ job_result.json.status | default('Unknown') if job_result.json is defined else 'API call failed' }}
      Error details: {{ job_result.msg | default('No error message') if job_result.failed else 'No error' }}
  when: job_result is failed or job_result.json is not defined or job_result.json.status != 'successful'

- name: Report successful inventory update
  debug:
    msg: "Inventory update completed successfully"
  when: job_result is success and job_result.json is defined and job_result.json.status == 'successful'